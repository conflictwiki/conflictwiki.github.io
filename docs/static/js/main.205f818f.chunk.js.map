{"version":3,"sources":["Visualisation.jsx","Abstract.jsx","edgeLinkChoice.jsx","infoColumn.jsx","GraphInfo.jsx","popup.jsx","App.js","reportWebVitals.js","index.js"],"names":["formatNodes","node","formatLinkColour","edge","conflict_attributes","label_discrete","formatLinkWidth","link","n_conflicts","formatLinkLabel","conflict_names","length","set","Set","Array","from","VisualisationGraph","props","nodes","map","type","id","String","entity_id","name","entity_name","url","num_conflicts","language","ideology","edges","source","entity_id_1","target","entity_id_2","transformEdges","lookup","state","size","resample","console","log","data","links","sampleSize","this","add","filtered_nodes","has","push","filtered_set","item","difference","filter","x","nextProps","nextState","sampleGraph","height","width","graphData","nodeColor","linkColor","linkWidth","onNodeClick","setClickedElement","onLinkClick","onLinkHover","updateLink","linkLabel","nodeRelSize","React","Component","Abstract","formatLink","replace","LinkChoice","undefined","setIter","values","next","value","mapped","element","ListGroup","Item","action","onClick","className","InfoSection","update","google","style","dangerouslySetInnerHTML","__html","transformList","list","GraphInfo","position","zindex","Card","fontSize","zIndex","Body","isEmpty","label","left","trigger","Button","top","right","variant","modal","close","Modal","Dialog","scrollable","Header","closeButton","onHide","Title","href","App","clickedElement","hoveredLink","bind","setHoveredLink","triggerResample","setState","Container","fluid","Row","Col","xs","sm","monitorWidth","monitorHeight","marginLeft","Visualisation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.205f818f.chunk.js","sourcesContent":["import { ForceGraph2D } from \"react-force-graph\";\nimport React from \"react\";\nimport { sampleSize } from \"lodash\";\n\nimport { nodes } from \"./network/nodes\";\nimport { edges } from \"./network/edges\";\n\n// let node_list = require(\"./network/nodes.json\");\n// let edge_list = require(\"./network/edges.json\");\n\nfunction transformNodes(nodes) {\n  return nodes.map((node) => ({\n    type: \"NODE\",\n    id: String(node.entity_id),\n    name: node.entity_name,\n    url: node.url,\n    num_conflicts: node.num_conflicts,\n    language: node.language,\n    ideology: node.ideology,\n  }));\n}\n\nfunction transformEdges(edges) {\n  return edges.map((edge) => ({\n    type: \"EDGE\",\n    source: String(edge.entity_id_1),\n    target: String(edge.entity_id_2),\n    conflict_attributes: edge.conflict_attributes,\n  }));\n}\n\nfunction formatNodes(node) {\n  return \"black\";\n}\n// edge colouring represents relationship. green --allies, red --enemies\n\nfunction formatLinkColour(edge) {\n  if (edge.conflict_attributes.label_discrete == 1) {\n    return \"#91cfa2\";\n  }\n\n  return \"#ff6666\";\n}\n\n// edge line width represents the number of conflicts.\nfunction formatLinkWidth(link) {\n  var min = 1;\n  var max = 20;\n\n  // okay that is starting to look better.\n  return link.conflict_attributes.n_conflicts * 0.5;\n  //   return 0.1;\n}\n\nfunction formatLinkLabel(link) {\n  if (link.conflict_attributes.conflict_names.length > 1) {\n    var set = new Set(link.conflict_attributes.conflict_names);\n\n    var mapped = Array.from(set);\n\n    return mapped.length + \" Conflicts\";\n  }\n\n  return link.conflict_attributes.conflict_names[0];\n}\n// using react Memo to prevent the rerendering of the graph\n\nclass VisualisationGraph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nodes = transformNodes(nodes);\n    this.edges = transformEdges(edges);\n\n    this.lookup = {};\n    for (let node of this.nodes) {\n      this.lookup[node.id] = node;\n    }\n\n    this.state = {\n      size: this.props.size,\n      resample: this.props.resample,\n    };\n  }\n\n  sampleGraph() {\n    console.log(\"SAMPLING GRAPH\");\n\n    var data = {\n      links: sampleSize(this.edges, 400),\n    };\n\n    var nodes = new Set();\n\n    for (let link of data.links) {\n      nodes.add(link.source);\n      nodes.add(link.target);\n    }\n\n    // WARNING, really strange bug\n    // set does not filter as we want\n    // some really janky logic is thus implemented to add difference\n    // very bad code.\n\n    // EDIT -> I think there is some kind of mutation where objects are being added to\n    // the set where there should just be ints.\n    // cant figure out how though (i think related to the visualisation library)\n    // THe sample above should\n\n\n    var filtered_nodes = [];\n    for (let node of this.nodes) {\n      if (nodes.has(node.id)) {\n\tfiltered_nodes.push(node);\n      }\n    }\n\n    let filtered_set = new Set(filtered_nodes.map((item) => item.id));\n    let difference = new Set([...nodes].filter((x) => !filtered_set.has(x)));\n\n    data.nodes = filtered_nodes;\n    data.nodes.push(...difference);\n\n    return data;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"attempting to update\");\n    // manually calculate (was having problems with app triggering rerender).\n    if (this.props.size != nextProps.size) {\n      return true;\n    }\n    if (this.props.resample != nextProps.resample) {\n      console.log(\"RESAMPLEING\");\n\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    var data = this.sampleGraph();\n\n    return (\n      <ForceGraph2D\n\n\theight={this.state.size.height}\n\twidth={this.state.size.width}\n\tgraphData={data}\n\tnodeColor={formatNodes}\n\tlinkColor={formatLinkColour}\n\tlinkWidth={formatLinkWidth}\n\tonNodeClick={this.props.setClickedElement}\n\tonLinkClick={this.props.setClickedElement}\n\tonLinkHover={this.props.updateLink}\n\tlinkLabel={formatLinkLabel}\n\tnodeRelSize={7}\n      />\n    );\n  }\n}\nexport default VisualisationGraph;\n","function Abstract() {\n  return (\n    <div>\n      <br />\n\n      <h3>Abstract</h3>\n      <p>Mitigation of militarised conflict requires an understanding of conflict causes and the relationships of warring entities. Peace and Conflict Studies seeks to build this understanding by considering differing ideologies of entity pairs (dyadic theories) and multi-lateral relationship structures (systemic theories). However, dyadic and systemic theories are not only entangled, but hard to operationalise and validate. The available event-level, tabular data is limiting quantitative models to mostly theory-free prediction. To address this issue, we propose combining rich textual and topological, conflict-level data with an expressive graph neural network. We publish the ConflictWiki dataset, a large graph extracted from Wikipedia where nodes represent entities connected by labelled edges representing “ally” or “enemy”-relationships in conflict. Node and edge features are given by Lonformer document embeddings of entity and conflict articles. This allows casting the problem as an edge classification task holding back certain textual or topological information depending on the dyadic or systemic setting. We obtain slightly stronger results in the systemic setting and find that the articles of entities are more informative for the ally--enemy classification task than the conflict article itself. Articles of allies are semantically more similar than those of enemies and certain sections (e.g. religion, politics) are more conflict-indicative overall.</p>\n    </div>\n  );\n};\n\nexport default Abstract;\n","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst formatLink = (link) => {\n  return \"https://en.wikipedia.org/wiki/\" + link.replace(\" \", \"_\");\n};\n\n\nexport default function LinkChoice({ link, updateLink }) {\n\n\n\n  if (link == undefined) {\n    return \"UNDEFINED\";\n  }\n\n\n  var set = new Set(link.conflict_attributes.conflict_names);\n  if (set.size == 1) {\n    var setIter = set.values();\n\n    updateLink({ type: \"EDGE_LINK\", url: formatLink(setIter.next().value) });\n\n  }\n  var mapped = Array.from(set).map((element) => <ListGroup.Item action onClick={() => updateLink({\n    type: \"EDGE_LINK\", url: formatLink(element)\n  })}>{element}</ListGroup.Item>);\n\n  return <div>\n    <h5 className=\"text-justify\">\n      Click on a link to display its wikipedia content\n\t  </h5>\n\n    <br />\n    <ListGroup>{mapped}</ListGroup> </div>;\n}\n","import React, { useEffect, useState } from \"react\";\nimport Abstract from \"./Abstract\";\nimport LinkChoice from \"./edgeLinkChoice\";\n\n\nexport default function InfoSection({ element, update }) {\n  // to display information of clicked nodes.\n\n  // if (element == {}) return <Abstract />;\n  // if (element === null) return null;\n\n  if (element.type == \"NODE\") {\n    var google = `<iframe width='100%' height='100%' scrolling='yes' src='${element.url}' sandbox='allow-modals allow-forms allow-popups allow-scripts allow-same-origin style=\"-webkit-transform:scale(0.5);-moz-transform-scale(0.5);\"'></iframe>`;\n\n    return <div\n      style={{ height: \"100%\", width: \"100%\" }}\n      dangerouslySetInnerHTML={{ __html: google ? google : \"\" }}\n    />;\n  }\n\n  if (element.type == \"EDGE\") {\n    return <LinkChoice link={element} updateLink={update} />;\n  }\n\n  if (element.type == \"EDGE_LINK\") {\n    console.log(element);\n    var google = `<iframe width='100%' height='100%' scrolling='yes' src='${element.url}' sandbox='allow-modals allow-forms allow-popups allow-scripts allow-same-origin style=\"-webkit-transform:scale(0.5);-moz-transform-scale(0.5);\"'></iframe>`;\n\n    return <div\n      style={{ height: \"100%\", width: \"100%\" }}\n      dangerouslySetInnerHTML={{ __html: google ? google : \"\" }}\n    />;\n  }\n\n\n\n\n  return (<div style={{ height: \"100%\", width: \"100%\" }}>\n\n    <div>\n      <h1 className=\"text-justify\">\n\tClick on a node or edge to display its wikipedia content\n\t  </h1>\n      <Abstract />\n    </div>\n\n\n  </div>\n  );\n}\n","import React from \"react\";\nimport { isEmpty } from \"lodash\";\n\nimport Card from \"react-bootstrap/Card\";\n\n// function transformConflictNames(names) {\n//   let set = new Set(names);\n//   return Array.from(set).map(x => <p>{x}</p>);\n// }\n\n// TODO: slice the lists to max 4\nfunction transformList(list) {\n  var set = new Set(list);\n\n  var mapped = Array.from(set).map((element) => <p>{element}</p>);\n\n  return mapped;\n}\n\nfunction GraphInfo({ node, link }) {\n  return (\n    <div style={{ position: \"absolute\", zindex: \"100\" }}>\n      <Card\n\tstyle={{\n\t  fontSize: 10,\n\t  zIndex: \"100\",\n\t  position: \"absolute\",\n\t  width: \"14rem\",\n\t}}\n      >\n\t<Card.Body>\n\t  <b>EDGE INFORMATION</b>\n\t  <br />\n\t  <br />\n\n\t  {!isEmpty(link) && (\n\t    <div>\n\t      {link.source.name + \" <-> \" + link.target.name}\n\t      <br />\n\t      <br />\n\t      <b>{link.conflict_attributes.label}</b>\n\t      <br />\n\t      <br />\n\t      {transformList(link.conflict_attributes.conflict_names)}\n\t    </div>\n\t  )}\n\t</Card.Body>\n      </Card>\n      <Card\n\tstyle={{\n\t  fontSize: 10,\n\t  position: \"absolute\",\n\t  left: \"250px\",\n\t  zIndex: \"100\",\n\t  width: \"12rem\",\n\t}}\n      >\n\t<Card.Body>\n\t  <b>NODE INFORMATION</b>\n\t  <br />\n\t  <b>{node.name}</b>\n\n\t  <br />\n\t  {node.num_conflicts != undefined\n\t    ? node.num_conflicts + \" Conflicts\"\n\t    : \"\"}\n\t  <br />\n\t</Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default GraphInfo;\n","import React from \"react\";\nimport Popup from \"reactjs-popup\";\nimport Button from \"react-bootstrap/Button\";\n\nimport Modal from \"react-bootstrap/Modal\";\n\n\nexport default () => (\n  <Popup\n    trigger={\n      <Button\n\tstyle={{\n\t  position: \"absolute\",\n\t  top: \"0px\",\n\t  right: \"215px\",\n\t  zIndex: \"100\",\n\t}}\n\tvariant=\"secondary \"\n      >\n\tAbout\n      </Button>\n    }\n    position=\"right center\"\n    modal\n  >{close =>\n    <Modal.Dialog scrollable>\n      <Modal.Header closeButton onHide={close}>\n\t<Modal.Title>About</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n\n\t<p>This work is currently under submission and therefore anonymised.</p>\n\t<h4>Ethics Statement</h4>\n\t<p>Our interdisciplinary paper bridges the academic disciplines of Natural Language Processing and Conflict and Peace Studies. The classification of armed conflict and its assessment of any kind is highly sensitive, subjective and context-dependent. Therefore, we have decided to limit our theory-driven classifications to historic data. Many supra-national and non-governmental institutions rely on computational models for conflict classification for peaceful, humanitarian purposes such as conflict mitigating and prevention. These models play an important role in the compilation of comprehensive state reports, war journalism, assessment of war crime, provision of humanitarian aid and international, jurisprudential decision-making. We would like to contribute to a transparent scholarly debate, rather than leaving ethically complex questions to secretive enterprises or governmental institutions. Even more so, since conflict classification models are already deployed on a daily basis in real-world applications, despite little scrutiny. Assessment of conflict should strive for more diverse, context-dependent perspectives accounting for psychological, socio-economic damage and more subtle, but no less important factors. We are aware of the risk of bias within <a href=\"https://en.wikipedia.org/wiki/Main_Page\">Wikipedia</a>. Our textual data is limited to English language only, but does not violate privacy rights by disclosing identifiable individuals. The countries analysed in our study are selected solely based on data availability. Training our models on empirical data, results are at risk of replicating inherent data bias.</p>\n      </Modal.Body>\n\n    </Modal.Dialog>\n\n    }\n  </Popup>\n);\n","import \"./App.css\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport cloneDeep from \"lodash\";\nimport React, { useCallback, useState } from \"react\";\n\nimport VisualisationGraph from \"./Visualisation\";\n\nimport InfoSection from \"./infoColumn\";\nimport GraphInfo from \"./GraphInfo\";\nimport InfoPopup from \"./popup\";\n\nimport { SizeMe } from \"react-sizeme\";\n\n// function handleClick() {\n//   console.log(\"Button Clicked!\");\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      clickedElement: {},\n      hoveredLink: {},\n      resample: 1,\n    };\n\n    this.setClickedElement = this.setClickedElement.bind(this);\n    this.setHoveredLink = this.setHoveredLink.bind(this);\n    this.triggerResample = this.triggerResample.bind(this);\n  }\n\n  setClickedElement(element) {\n    this.setState({ clickedElement: element });\n  }\n\n  setHoveredLink(link) {\n    console.log(link);\n    this.setState({ hoveredLink: link });\n  }\n\n  triggerResample() {\n    this.setState({ resample: this.state.resample + 1 });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n\t<div>\n\t  <h1> ConflictWiki Dataset </h1>\n\t  <h3>\n\t    Text or Topology? Classifying Ally-Enemy Pairs in Militarised\n\t    Conflict\n\t  </h3>\n\t</div>\n\n\t<Row className=\"vh-100 d-flex\">\n\t  <Col xs={3} sm={7} className=\"vh-100 d-flex\">\n\t    <SizeMe monitorWidth monitorHeight>\n\t      {({ size }) => (\n\t\t<div style={{ width: \"100%\", height: \"100%\" }}>\n\t\t  <Button\n\t\t    style={{\n\t\t      position: \"absolute\",\n\t\t      top: \"0px\",\n\t\t      right: \"0px\",\n\t\t      zIndex: \"100\",\n\t\t      marginLeft: \"auto\",\n\t\t    }}\n\t\t    variant=\"secondary\"\n\t\t    onClick={() => this.triggerResample()}\n\t\t  >\n\t\t    Click To Resample Graph\n\t\t  </Button>\n\t\t  <InfoPopup />\n\t\t  <GraphInfo\n\t\t    node={this.state.clickedElement}\n\t\t    link={this.state.hoveredLink}\n\t\t  />\n\n\t\t  <VisualisationGraph\n\t\t    setClickedElement={this.setClickedElement}\n\t\t    updateLink={this.setHoveredLink}\n\t\t    size={size}\n\t\t    resample={this.state.resample}\n\t\t  />\n\t\t</div>\n\t      )}\n\t    </SizeMe>\n\t  </Col>\n\t  <Col\n\t    xs={9}\n\t    sm={5}\n\t    className=\"vh-100 d-flex\" /* style={{ height: \"100px\" }} */\n\t  >\n\t    <InfoSection\n\t      element={this.state.clickedElement}\n\t      update={this.setClickedElement}\n\t    />\n\t  </Col>\n\t</Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}